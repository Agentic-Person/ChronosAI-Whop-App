name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests (emergency deployments only)'
        required: false
        default: 'false'

env:
  NODE_VERSION: '20.x'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # ===================================
  # JOB 1: Validate Environment
  # ===================================
  validate:
    name: Validate Environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate environment variables
        run: node scripts/validate-env.js
        env:
          # Pass all required env vars for validation
          WHOP_API_KEY: ${{ secrets.WHOP_API_KEY }}
          NEXT_PUBLIC_WHOP_APP_ID: ${{ secrets.NEXT_PUBLIC_WHOP_APP_ID }}
          WHOP_CLIENT_ID: ${{ secrets.WHOP_CLIENT_ID }}
          WHOP_CLIENT_SECRET: ${{ secrets.WHOP_CLIENT_SECRET }}
          WHOP_WEBHOOK_SECRET: ${{ secrets.WHOP_WEBHOOK_SECRET }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

  # ===================================
  # JOB 2: Run Tests
  # ===================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: validate
    if: github.event.inputs.skip_tests != 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run unit tests
        run: npm run test -- --passWithNoTests
        env:
          NODE_ENV: test

      - name: Run integration tests
        run: npm run test:integration -- --passWithNoTests
        env:
          NODE_ENV: test
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

      - name: Upload test coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-coverage
          path: coverage/
          retention-days: 7

  # ===================================
  # JOB 3: Build Application
  # ===================================
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [validate, test]
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}
          NEXT_PUBLIC_WHOP_APP_ID: ${{ secrets.NEXT_PUBLIC_WHOP_APP_ID }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_POSTHOG_KEY: ${{ secrets.NEXT_PUBLIC_POSTHOG_KEY }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

      - name: Check build output
        run: |
          if [ ! -d ".next" ]; then
            echo "Build failed - .next directory not found"
            exit 1
          fi
          echo "Build successful"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: .next/
          retention-days: 1

  # ===================================
  # JOB 4: Database Migration Check
  # ===================================
  migration-check:
    name: Check Database Migrations
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for pending migrations
        run: |
          echo "Checking for unapplied migrations..."
          # Add migration check logic here
          # Example: node scripts/check-migrations.js

      - name: Validate migration files
        run: |
          echo "Validating migration syntax..."
          for file in supabase/migrations/*.sql; do
            if [ -f "$file" ]; then
              echo "Checking $file"
              # Basic SQL syntax validation
            fi
          done

  # ===================================
  # JOB 5: Deploy to Vercel
  # ===================================
  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [build, migration-check]
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull Vercel Environment
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel
        id: deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "Deployed to: $DEPLOYMENT_URL"

      - name: Verify deployment
        run: |
          DEPLOYMENT_URL="${{ steps.deploy.outputs.url }}"
          echo "Verifying deployment at: $DEPLOYMENT_URL/health"

          # Wait for deployment to be ready
          sleep 10

          # Check health endpoint
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$DEPLOYMENT_URL/health")

          if [ "$STATUS_CODE" -eq 200 ] || [ "$STATUS_CODE" -eq 503 ]; then
            echo "Health check passed (status: $STATUS_CODE)"
          else
            echo "Health check failed (status: $STATUS_CODE)"
            exit 1
          fi

  # ===================================
  # JOB 6: Post-Deployment Tasks
  # ===================================
  post-deploy:
    name: Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: deploy
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: production
          version: ${{ github.sha }}

      - name: Notify deployment success
        run: |
          echo "Deployment successful!"
          echo "SHA: ${{ github.sha }}"
          echo "URL: ${{ needs.deploy.outputs.url }}"

      - name: Send Discord notification
        if: secrets.DISCORD_WEBHOOK_URL != ''
        run: |
          curl -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "embeds": [{
                "title": "🚀 Production Deployment Successful",
                "description": "Video Wizard has been deployed to production",
                "color": 3066993,
                "fields": [
                  {
                    "name": "Commit",
                    "value": "[${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})",
                    "inline": true
                  },
                  {
                    "name": "Branch",
                    "value": "${{ github.ref_name }}",
                    "inline": true
                  },
                  {
                    "name": "Author",
                    "value": "${{ github.actor }}",
                    "inline": true
                  }
                ],
                "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
              }]
            }'

  # ===================================
  # JOB 7: Rollback on Failure
  # ===================================
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy, post-deploy]
    if: failure()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Rollback deployment
        run: |
          echo "Deployment failed, initiating rollback..."
          # Get the previous successful deployment
          PREV_DEPLOYMENT=$(vercel ls --token=${{ secrets.VERCEL_TOKEN }} | grep "READY" | head -2 | tail -1 | awk '{print $1}')

          if [ -n "$PREV_DEPLOYMENT" ]; then
            echo "Rolling back to: $PREV_DEPLOYMENT"
            vercel promote "$PREV_DEPLOYMENT" --token=${{ secrets.VERCEL_TOKEN }}
          else
            echo "No previous deployment found for rollback"
          fi

      - name: Notify rollback
        if: secrets.DISCORD_WEBHOOK_URL != ''
        run: |
          curl -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "embeds": [{
                "title": "⚠️ Deployment Failed - Rollback Initiated",
                "description": "Production deployment failed and has been rolled back",
                "color": 15158332,
                "fields": [
                  {
                    "name": "Commit",
                    "value": "${{ github.sha }}",
                    "inline": true
                  },
                  {
                    "name": "Branch",
                    "value": "${{ github.ref_name }}",
                    "inline": true
                  }
                ],
                "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
              }]
            }'
