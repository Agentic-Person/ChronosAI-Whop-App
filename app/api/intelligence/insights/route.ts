/**
 * AI Insights API
 * Get AI-generated insights and recommendations
 * ENTERPRISE tier feature
 */

import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@/lib/supabase/server';
import { withFeatureGate } from '@/lib/middleware/feature-gate';
import { Feature } from '@/lib/features/types';
import { InsightsGenerator } from '@/lib/intelligence/insights-generator';

/**
 * GET /api/intelligence/insights?period=week
 * Get insights for creator or student
 */
export const GET = withFeatureGate(
  { feature: Feature.FEATURE_CONTENT_INTELLIGENCE },
  async (req: NextRequest) => {
    try {
      const supabase = createClient();
      const { searchParams } = new URL(req.url);
      const period = searchParams.get('period') || 'week';

      const {
        data: { user },
        error: authError,
      } = await supabase.auth.getUser();

      if (authError || !user) {
        return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
      }

      // Check if user is creator or student
      const { data: creator } = await supabase
        .from('creators')
        .select('id')
        .eq('user_id', user.id)
        .single();

      const generator = new InsightsGenerator();
      let insights;

      if (creator) {
        // Get creator insights from database (generated by background job)
        const { data: storedInsights } = await supabase
          .from('ai_insights')
          .select('*')
          .eq('creator_id', creator.id)
          .eq('dismissed', false)
          .order('priority', { ascending: true })
          .order('created_at', { ascending: false })
          .limit(10);

        insights = storedInsights || [];
      } else {
        // Get student insights
        const { data: student } = await supabase
          .from('students')
          .select('id')
          .eq('user_id', user.id)
          .single();

        if (!student) {
          return NextResponse.json({ error: 'User not found' }, { status: 404 });
        }

        insights = await generator.generateStudentInsights(student.id);
      }

      return NextResponse.json({
        success: true,
        insights,
        count: insights.length,
      });
    } catch (error: any) {
      console.error('Get insights error:', error);
      return NextResponse.json(
        { error: error.message || 'Failed to get insights' },
        { status: 500 }
      );
    }
  }
);

/**
 * POST /api/intelligence/insights/generate
 * Manually trigger insight generation (creator only)
 */
export const POST = withFeatureGate(
  { feature: Feature.FEATURE_CONTENT_INTELLIGENCE },
  async (req: NextRequest) => {
    try {
      const supabase = createClient();

      const {
        data: { user },
        error: authError,
      } = await supabase.auth.getUser();

      if (authError || !user) {
        return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
      }

      const { data: creator } = await supabase
        .from('creators')
        .select('id')
        .eq('user_id', user.id)
        .single();

      if (!creator) {
        return NextResponse.json({ error: 'Creator access required' }, { status: 403 });
      }

      // Generate fresh insights
      const generator = new InsightsGenerator();
      const insights = await generator.generateWeeklyInsights(creator.id);

      return NextResponse.json({
        success: true,
        insights,
        count: insights.length,
        message: 'Generated new insights',
      });
    } catch (error: any) {
      console.error('Generate insights error:', error);
      return NextResponse.json(
        { error: error.message || 'Failed to generate insights' },
        { status: 500 }
      );
    }
  }
);

/**
 * PATCH /api/intelligence/insights/:id
 * Dismiss an insight
 */
export async function PATCH(req: NextRequest) {
  try {
    const supabase = createClient();
    const { insightId } = await req.json();

    if (!insightId) {
      return NextResponse.json({ error: 'Insight ID required' }, { status: 400 });
    }

    const {
      data: { user },
      error: authError,
    } = await supabase.auth.getUser();

    if (authError || !user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // Update insight
    const { error } = await supabase
      .from('ai_insights')
      .update({
        dismissed: true,
        dismissed_at: new Date().toISOString(),
      })
      .eq('id', insightId);

    if (error) throw error;

    return NextResponse.json({
      success: true,
      message: 'Insight dismissed',
    });
  } catch (error: any) {
    console.error('Dismiss insight error:', error);
    return NextResponse.json(
      { error: error.message || 'Failed to dismiss insight' },
      { status: 500 }
    );
  }
}
